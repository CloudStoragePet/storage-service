server:
  port: 8081

## DB config
spring:
  application:
    name: storage-service
  datasource:
    url: jdbc:postgresql://${DB_HOST:postgres}:5432/ca-storage?currentSchema=ca-storage
    username: ${DB_USER:postgres}
    password: ${DB_PASSWORD:1085}
  jpa:
    hibernate:
      ddl-auto: none
  flyway:
    enabled: true
  ## RabbitMQ config
#  rabbitmq:
#    host: rabbitmq
#    port: 5672
#    username: guest
#    password: guest
  ## redis config
  data:
    redis:
      host: redis
      port: 6379
      password: 1085
#      url: redis://redis:6379
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:kafka:29092}
    topicName: ${KAFKA_TOPIC_NAME:storage-service}
    streams:
      replication-factor: ${KAFKA_REPLICATION_FACTOR:1}

## OpenApi config
springdoc:
  packagesToScan: org.brain.storageservice.controller
  pathsToMatch:
    - /api/v1/storage/**


## folder config
storage:
  path: ${STORAGE_BASE_PATH:/home/vitalii/Projects/CloudApp/storage-service/storage}

## RabbitMQ config
#rabbitmq:
#  move-queue-name: ${RABBITMQ_MOVE_QUEUE_NAME:storage-move-queue}
#  exchange-name: ${RABBITMQ_EXCHANGE_NAME:storage-exchange}
#  routing-key: ${RABBITMQ_ROUTING_KEY:storage-move-queue}

## Monitoring
management:
  tracing:
    sampling:
      probability: 1.0
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus
  otlp:
    metrics:
      export:
        url: http://otel-collector:4318/v1/metrics
        step: 10s
        resource-attributes:
          "service.name": ${spring.application.name}
    tracing:
      endpoint: http://otel-collector:4318/v1/traces

logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

## Eureka
eureka:
  client:
    enabled: true
    service-url:
      defaultZone: ${EUREKA_URL:http://eureka-server:8761/eureka}
    fetch-registry: true
    register-with-eureka: true
  instance:
    prefer-ip-address: false

